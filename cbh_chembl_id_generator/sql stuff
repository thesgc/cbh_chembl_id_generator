







WITH upsert AS (UPDATE cbh_chembl_id_generator_cbhcompoundid SET current_batch_id=current_batch_id+1 WHERE structure_key='test' AND assigned_id='test' RETURNING *)
    INSERT INTO cbh_chembl_id_generator_cbhcompoundid (structure_key, assigned_id,current_batch_id, original_project_key, original_installation_key ) SELECT 'test', 'test', 1, 'tester', 'tester' WHERE NOT EXISTS (SELECT * FROM cbh_chembl_id_generator_cbhcompoundid)










WITH upsert AS (UPDATE cbh_chembl_id_generator_cbhcompoundid SET current_batch_id=current_batch_id+1 WHERE structure_key='test' AND assigned_id='test' RETURNING *)
    INSERT INTO cbh_chembl_id_generator_cbhcompoundid (structure_key, assigned_id,current_batch_id, original_project_key, original_installation_key ) SELECT 'test', 'test', 1, 'tester', 'tester' WHERE NOT EXISTS (SELECT * FROM cbh_chembl_id_generator_cbhcompoundid);












CREATE or replace FUNCTION merge_db11(structure_keyv char, assigned_idv char , original_project_keyv char, original_installation_keyv char)  
RETURNS setof cbh_chembl_id_generator_cbhcompoundid
 AS 

$BODY$   
declare  result "cbh_chembl_id_generator_cbhcompoundid"%rowtype;
BEGIN
    
        -- first try to update the key
        for result in 
        UPDATE cbh_chembl_id_generator_cbhcompoundid SET current_batch_id=current_batch_id+1 
        WHERE 'structure_key' = structure_keyv returning * loop return next result; end loop;
        IF found THEN
            RETURN;
        END IF;
        -- not there, so try to insert the key
        -- if someone else inserts the same key concurrently,
        -- we could get a unique-key failure
        BEGIN
             INSERT INTO cbh_chembl_id_generator_cbhcompoundid ("structure_key", "assigned_id","current_batch_id", "original_project_key", "original_installation_key" ) SELECT 'test', 'test', 1, 'tester', 'tester' returning current_batch_id as cid;
            RETURN;
        EXCEPTION WHEN unique_violation THEN
            -- do nothing, and loop to try the UPDATE again
        END;
END;
$BODY$   
LANGUAGE plpgsql;














CREATE or replace FUNCTION merge_db18(structure_keyv char, assigned_idv char , original_project_keyv char, original_installation_keyv char)  
 RETURNS SETOF cbh_chembl_id_generator_cbhcompoundid
  VOLATILE
AS $$
declare r cbh_chembl_id_generator_cbhcompoundid%rowtype;
BEGIN
  RETURN QUERY INSERT INTO cbh_chembl_id_generator_cbhcompoundid ("structure_key", "assigned_id","current_batch_id", "original_project_key", "original_installation_key" ) values 
  (structure_keyv, assigned_idv, 1, original_project_keyv, original_installation_keyv) returning *;
        EXCEPTION WHEN unique_violation THEN
  for r in   UPDATE cbh_chembl_id_generator_cbhcompoundid SET current_batch_id=current_batch_id+1  
        WHERE structure_key = structure_keyv returning * loop return next r;  END LOOP;
    RETURN;
END;
$$ LANGUAGE plpgsql;









CREATE or replace FUNCTION merge_db18(structure_keyv char, assigned_idv char , original_project_keyv char, original_installation_keyv char)  
 RETURNS SETOF cbh_chembl_id_generator_cbhcompoundid
  VOLATILE
AS $$
declare r cbh_chembl_id_generator_cbhcompoundid%rowtype;
BEGIN

  RETURN QUERY INSERT INTO cbh_chembl_id_generator_cbhcompoundid ("structure_key", "assigned_id","current_batch_id", "original_project_key", "original_installation_key" ) values 
  (structure_keyv, assigned_idv, 1, original_project_keyv, original_installation_keyv) returning *;
        EXCEPTION WHEN unique_violation THEN
  RETURN QUERY    UPDATE cbh_chembl_id_generator_cbhcompoundid SET current_batch_id=current_batch_id+1  
        WHERE structure_key = structure_keyv returning *;


END;
$$ LANGUAGE plpgsql;












CREATE or replace FUNCTION merge_db18(structure_keyv char, assigned_idv char , original_project_keyv char, original_installation_keyv char)  
 RETURNS SETOF cbh_chembl_id_generator_cbhcompoundid
  VOLATILE
AS $$
declare r cbh_chembl_id_generator_cbhcompoundid%rowtype;
BEGIN
    LOOP
    for r in   
        UPDATE cbh_chembl_id_generator_cbhcompoundid SET current_batch_id=current_batch_id+1 WHERE structure_key = structure_keyv returning * 
        loop return next r;  
    END LOOP;
    IF found THEN
        RETURN;
    END IF;
    BEGIN
    RETURN QUERY INSERT INTO cbh_chembl_id_generator_cbhcompoundid ("structure_key", "assigned_id","current_batch_id", "original_project_key", "original_installation_key" ) values 
      (structure_keyv, assigned_idv, 1, original_project_keyv, original_installation_keyv) returning *;
    RETURN;
    EXCEPTION WHEN unique_violation THEN
    END;
    END LOOP;
END;
$$ 
LANGUAGE plpgsql;











 LOOP
        -- first try to update the key
        UPDATE db SET b = data WHERE a = key;
        IF found THEN
            RETURN;
        END IF;
        -- not there, so try to insert the key
        -- if someone else inserts the same key concurrently,
        -- we could get a unique-key failure
        BEGIN
            INSERT INTO db(a,b) VALUES (key, data);
            RETURN;
        EXCEPTION WHEN unique_violation THEN
            -- Do nothing, and loop to try the UPDATE again.
        END;
    END LOOP;

















